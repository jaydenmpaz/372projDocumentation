"use strict";(self.webpackChunk_372_documentation=self.webpackChunk_372_documentation||[]).push([[976],{1512:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var i=t(4848),s=t(8453);const r={sidebar_position:1,slug:"/"},a="CSC 372 Language Documentation",o={id:"intro",title:"CSC 372 Language Documentation",description:"Getting Started",source:"@site/docs/intro.md",sourceDirName:".",slug:"/",permalink:"/372proj/docs/",draft:!1,unlisted:!1,editUrl:"https://github.com/jaydenmpaz/372proj/docs/intro.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,slug:"/"},sidebar:"tutorialSidebar"},l={},d=[{value:"Getting Started",id:"getting-started",level:2},{value:"What you&#39;ll need",id:"what-youll-need",level:2},{value:"Basic Structure",id:"basic-structure",level:2},{value:"Data Types",id:"data-types",level:2},{value:"Declarations",id:"declarations",level:2},{value:"Expressions and Operators",id:"expressions-and-operators",level:2},{value:"Conditional Statments",id:"conditional-statments",level:2},{value:"Loops",id:"loops",level:2}];function c(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h1,{id:"csc-372-language-documentation",children:"CSC 372 Language Documentation"}),"\n",(0,i.jsx)(e.h1,{id:"lets-discover-our-language",children:"Let's discover our language."}),"\n",(0,i.jsx)(e.h2,{id:"getting-started",children:"Getting Started"}),"\n",(0,i.jsxs)(e.p,{children:["Get started by navigating to our ",(0,i.jsx)(e.strong,{children:(0,i.jsx)(e.a,{href:"https://github.com/jaydenmpaz/372proj",children:"GitHub Repository"})}),", containing all of our code and documents."]}),"\n",(0,i.jsx)(e.h2,{id:"what-youll-need",children:"What you'll need"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Python and your favorite IDE!"}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"basic-structure",children:"Basic Structure"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-func",metastring:"int asd(int a, string b, bool c){",children:'\n    print("Parameter",a,b,c);\n\n    string name = input();\n    int y = int(input());\n\n    print("Values inputted:");\n    print(name,y);\n\n    print("Loop");\n    for(int x = 10;x<15 && x>=10 && x!=20;x+=1){\n        if(x==12){\n            for(int y=100;y<200;y+=10){\n                if(y>110 && y<=190)\n                {\n                    print(y);\n                }\n            }\n        }\n        else { print(x); }\n    }\n    return 0;\n}\n\nprint("Calling function");\nint ret = asd(1,"asd",false);\nprint("Function returned",ret);\n'})}),"\n",(0,i.jsx)(e.p,{children:"Programs written in our language follow an easy structured format. A program is defined as a series or list of statements. Statements include declarations, assignments, expressions and evaluation, function defition and calls."}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"<program> ::= <statement_list>\n<statement_list> ::= <statement> <statement_list> | <statement>\n"})}),"\n",(0,i.jsx)(e.h2,{id:"data-types",children:"Data Types"}),"\n",(0,i.jsx)(e.p,{children:"Our language supports three basic data types:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Integers, digits 0 - 9"}),"\n",(0,i.jsx)(e.li,{children:"Booleans, true/false"}),"\n",(0,i.jsx)(e.li,{children:"Strings, collection of characters"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:'<identifier> ::= <letter> (<letter> | <digit>)*\n<integer> ::= <digit>+\n<string> ::= "\\"" <string_helper> "\\""\n<boolean> ::= "true" | "false"\n<letter> ::= "a"-"z" | "A"-"Z"\n<digit> ::= "0"-"9"\n'})}),"\n",(0,i.jsx)(e.h2,{id:"declarations",children:"Declarations"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:'// Declare an integer\nint myInt = 10;\n\n// Declare a boolean\nbool myBool = true;\n\n// Declare a string\nstring myString = "Hello, World!";\n'})}),"\n",(0,i.jsx)(e.p,{children:"Variables are strongly types and must be declared.\nFor declarations, they must supply a name with a data type when initializing."}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:'<variable_declaration> ::= <int_declaration> | <bool_declaration> | <string_declaration>\n<int_declaration> ::= "int " <identifier> " = " <basic_expression>\n<bool_declaration> ::= "bool " <identifier> " = " <boolean_expression>\n<string_declaration> ::= "string " <identifier> " = " <string>\n'})}),"\n",(0,i.jsx)(e.h2,{id:"expressions-and-operators",children:"Expressions and Operators"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"int a = 5;\nint b = 10;\n\n// Arithmetic expression\nint sum = a + b;\n\n// Comparison expression\nbool isGreater = a > b;\n\n// Boolean expression\nbool result = (a < b) && (sum > 10);\n"})}),"\n",(0,i.jsx)(e.p,{children:"Expressions can be arithmetic, boolean, or comparison-based. The following are supported:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Arithemetic: addition '+', minus '-', multiplication '*', divide '/', and modulus '%'"}),"\n",(0,i.jsx)(e.li,{children:"Boolean: and '&&', or '||', not '!'"}),"\n",(0,i.jsx)(e.li,{children:"Comparison: less than, greater than, equals, less than or equal to, greater than or equal to"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:'<expression> ::= <basic_expression> | <boolean_expression> | <comparison_expression>\n<basic_expression> ::= <integer> ("+" | "-" | "*" | "/" | "%") <basic_expression> | <integer>\n<boolean_expression> ::= <boolean_expression> ("&&" | "||") <boolean_expression> | "!" <boolean_expression> | <comparison_expression>\n<comparison_expression> ::= (<identifier> | <integer>) <comparison_operator> (<identifier> | <integer>)\n'})}),"\n",(0,i.jsx)(e.h2,{id:"conditional-statments",children:"Conditional Statments"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:'bool isSunny = true;\nif (isSunny) {\n    print("It\'s a sunny day!");\n} else {\n    print("It might rain today.");\n}\n'})}),"\n",(0,i.jsx)(e.p,{children:"Allows for standard conditional logic statements which execution is based on boolean expressions."}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:'<conditional_statement> ::= "if" "(" <boolean_expression> ")" "{" <statement_list> "}"\n                          | "if" "(" <expression> ")" "{" <statement_list> "}" <conditional_statement>\n                          | "if" "(" <expression> ")" "{" <statement_list> "}" "else" "{" <statement_list> "}"\n'})}),"\n",(0,i.jsx)(e.h2,{id:"loops",children:"Loops"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"// Print numbers from 1 to 5\nfor (int i = 1; i <= 5; i = i + 1) {\n    print(i);\n}\n"})}),"\n",(0,i.jsx)(e.p,{children:"For loops are supported, they require initialization of looping variable, boolean condition, and iteration expression to progress the loop."}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:'<loop_statement> ::= "for" "(" <assignment> ";" <boolean_expression> ";" <assignment> ")" "{" <statement_list> "}"\n'})}),"\n",(0,i.jsx)(e.h1,{id:"functions",children:"Functions"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"// Function declaration\nfunction int add(int x, int y) {\n    return x + y;\n}\n"})}),"\n",(0,i.jsx)(e.p,{children:"Functions can be declared with a return type, a list of valid paramters, followed by a block of exectuable statements."}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:'<function_declaration> ::= "func " <data_type> <identifier> "(" <parameters_list> ")" "{" <statement_list> "}"\n                         | "func " <data_type> <identifier> "(" <parameters_list> ")" "{" <statement_list> <return_statement> "}"\n<return_statement> ::= "return " (<identifier> | <expression>) ";"\n'})}),"\n",(0,i.jsx)(e.h1,{id:"input--output",children:"Input / Output"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:'print("CSC 372");\nString x = input("is awesome");\n'})}),"\n",(0,i.jsxs)(e.p,{children:["Our language supports the basic operations of input and output. ",(0,i.jsx)(e.code,{children:"print"})," statements will be used for output, while we can capture user input with ",(0,i.jsx)(e.code,{children:"input"}),", which reads a string that can be converted to other types."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:'<print_statement> ::= "print" "(" <string> ")" ";"\n<input_statement> ::= <data_type> <identifier> "=" "input" "(" ")" ";"\n'})})]})}function p(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(c,{...n})}):c(n)}}}]);